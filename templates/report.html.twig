{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}
<h1>Report</h1>
    <h3>Innehållsförteckning</h3>
    <a href="#kmom01">Kursmoment 1</a>
    <br>
    <a href="#kmom02">Kursmoment 2</a>
    <br>
    <a href="#kmom03">Kursmoment 3</a>
    <br>
    <a href="#kmom04">Kursmoment 4</a>
    <br>
    <a href="#kmom05">Kursmoment 5</a>
    <br>
    <a href="#kmom06">Kursmoment 6</a>
    <br>
    <a href="#kmom10">Kursmoment 7/10</a>


<h1>Redovisning</h1>
<h2 id="kmom01">kmom01</h2>
<p>Objektorientering känns fortfarande lite komplicerat, trots att vi hållit på med det en hel del under oopython och js-kurserna. Men det blir bättre och bättre hela tiden. Det ska bli kul att lära sig om objektorienterad webbteknologi.</p>
<p>En klass är en mall eller en ritning som beskriver hur objekt ska skapas. Man definierar en klass med nyckelordet class följt av klassens namn och dess egenskaper och metoder. Förstår man detta så bör det inte vara några problem att skapa klasser och objekt.</p>
<p>Kodstrukturen som jag förstår den är i stort sett uppdelad i controllers och template-filer. Jag använder templatemotorn Twig för att rendera mina sidor. Sen är där ju andra saker i bakgrunden som hjälper till att bygga upp sidorna.</p>
<p>Något som jag fann extra intressant i artikeln <a href="https://phptherightway.com/">PHP: The Right Way</a> var hur man på bästa sätt strukturerar upp sina filer. Paul M. Jones har forskat i ämnet och har släppt en standard för hur man kan strukturera upp det på ett bra sätt. Mer info finnes <a href="https://github.com/php-pds/skeleton">här</a></p>
<p>Mitt TIL för detta momenten är att få till kod/filstrukturen direkt. Jag satt förvirrad rätt länge eftersom dbwebb test inte tyckte om min filstruktur och jag inte förstod varför. Men det släppte till slut och nu verkar jag fått till det!</p>

<h2 id="kmom02">kmom02</h2>
<p>Arv (Inheritance) är en viktig del av objektorienterad programmering där en klass kan ärva egenskaper från en annan klass, ofta kallad förälderklass eller parentclass. I PHP används nyckelordet "extends" för att ange att en klass ska ärva från en annan.</p>
<p>Komposition (Composition) är en princip där en klass innehåller en eller flera instanser av andra klasser. Detta tillåter klasserna att använda funktionalitet från andra klasser genom att skapa objekt utav dem.</p>
<p>Interface är ett gränssnitt som definierar vilka metoder som en klass skall implementera. I PHP används nyckelordet "interface" för att definiera ett gränssnitt. Sedan kan det implementeras med "implements"-nyckelordet.</p>
<p>En trait är en mekanism för att återanvända kod i flera klasser genom att samla grupper av metoder i separata enheter. I PHP används nyckelordet "trait" för att definiera en trait och inkluderas sedan med "use"-nyckelordet.</p>
<br>
<p>Jag skapade uppgiften på det enklaste och smidigaste sättet enligt mig. Min implementation av korten kan säkert skötas på ett snyggare sätt, men jag gjorde en array i min Card-klass där jag definierade kortens namn som nyckel och deras UTF-8 enkodning som värde. Sedan gjorde jag bara så att Hjärter och Spader blev röda med hjälp av en liten if-sats och css-kod. Jag tycker att jag kunde lagt mer krut på stylingen dock, men det kommer senare.</p>
<p>Jag tycker personligen att det börjar bli enklare med Symphony och applikationskod. Det börjar falla på plats nu när man kommit igång, men det var trögt i början.</p>
<p>Min TIL för detta kursmomentet är nog att det är otroligt nyttigt att ha en sida där man kan "tracka" vad som sparas i sessionen. Det gör det otroligt mycket lättare att debugga och se vad som faktiskt händer.</p>

<h2 id="kmom03">kmom03</h2>
<p>Redovisningstext....</p>

<h2 id="kmom04">kmom04</h2>
<p>Redovisningstext....</p>

<h2 id="kmom05">kmom05</h2>
<p>Redovisningstext....</p>

<h2 id="kmom06">kmom06</h2>
<p>Redovisningstext....</p>

<h2 id="kmom07">kmom07/10</h2>
<p>Redovisningstext....</p>
{% endblock %}